{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3f259555",
   "metadata": {},
   "source": [
    "# Week 0 - Exercises\n",
    "\n",
    "This week there is some recommended reading and practical work that builds on what we covered in the first session. \n",
    "\n",
    "The article I would like you to read, and you can access it by clicking on the red link, is called *[How long does it take to learn Python?](https://realpython.com/how-long-does-it-take-to-learn-python/)* This is an accessible read that explores reasons for learning Python, what it means to learn Python, how you can keep track of progress, factors that may influence your journey, how long it takes, and resources that may help speed your learning. \n",
    "\n",
    "The rest of your efforts this week should be directed towards familiarising yourself with Jupyter and Spyder. Both of these software have a `Help` menu, which is a great place to begin. You are bound to encounter technical jargon and concepts that you don't understand, but don't worry! Just make a note, and remember to ask me about it when you get the chance.\n",
    "\n",
    "By the way, don't worry if you think you have \"broken\" any of the documents provided in the course materials. Just download a fresh copy!\n",
    "\n",
    "## Jupyter\n",
    "\n",
    "1. Take the `User Interface Tour`\n",
    "2. Have a look at the `Keyboard Shortcuts`\n",
    "3. Read the `Notebook Help` pages\n",
    "\n",
    "![](../images/jupyter_help.png)\n",
    "\n",
    "## Spyder\n",
    "\n",
    "1. Take the Spyder tour\n",
    "2. Review the Spyder documentation\n",
    "3. Watch Parts 1, 2 and 3 of the \"First steps with Spyder\" tutorial videos\n",
    "4. Skim through the Spyder tutorial (you can work through this at you own pace for extra practice).\n",
    "5. Look at the Shortcut summary\n",
    "\n",
    "![](../images/spyder_help.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "811f29e4",
   "metadata": {},
   "source": [
    "Exercise 1 - An improved guessing game\n",
    "--------------------------------------\n",
    "\n",
    "Let's have another look at the number guessing game script. With an instruction like **\"Enter any number: \"**, a naive user could be forgiven for entering something like 78.3, which is, after all, a number. \n",
    "\n",
    "But if a decimal number is entered, the program throws a cryptic error message. See for yourself by clicking on the cell below, pressing `Shift+Enter` to execute the code, and then entering a decimal number instead of a whole number. Don't worry about the error message for now. Suffice to say that the computer is unable to carry out the instruction!\n",
    "\n",
    "It would be better if the user knew not to enter a decimal number. **Change the code below so that when it is executed the instruction will read \"Enter a whole number between 0 and 100: \"**\n",
    "\n",
    "**Hint** - look at the first `input` function\n",
    "\n",
    "If you found that easy, try changing the message at the end of the program to make it more congratulatory!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bf622d24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter any number:  78.3\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: '78.3'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/c9/7yddvl1n2ss863cgfngj0wpm0000gp/T/ipykernel_7904/2203190759.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# Ask the user to have a guess\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mguess\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Enter any number: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m# Keep asking until the guess is right\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: '78.3'"
     ]
    }
   ],
   "source": [
    "\"\"\"Play a number guessing game.\"\"\"\n",
    "\n",
    "import random\n",
    "\n",
    "\n",
    "# Generate a random number between 0 and 100\n",
    "n = random.randrange(1, 100)\n",
    "\n",
    "# Ask the user to have a guess\n",
    "guess = int(input(\"Enter any number: \"))\n",
    "\n",
    "# Keep asking until the guess is right\n",
    "while n != guess:\n",
    "    if guess < n:\n",
    "        print(\"Too low\")\n",
    "        guess = int(input(\"Enter number again: \"))\n",
    "    elif guess > n:\n",
    "        print(\"Too high!\")\n",
    "        guess = int(input(\"Enter number again: \"))\n",
    "    else:\n",
    "        break\n",
    "\n",
    "# Tell user they guessed right\n",
    "print(\"you guessed it right!!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd74eb9a",
   "metadata": {},
   "source": [
    "Exercise 2 - Sensible temperatures\n",
    "----------------------------------\n",
    "\n",
    "Remember the Fahrenheit to Celsius program? \n",
    "\n",
    "Depending on the Fahrenheit value that the user provides, the reported temperature in degrees Celsius may be given with much more precision than we need. For example, if I enter 75.5 as a temperature in Fahrenheit, the result in Celsius is reported as 24.166666666666668. What need had I of this precision?\n",
    "\n",
    "Can you figure out a way to round the Celsius value to two decimal places? We haven't learned how to do this yet, so it may prove a tricky one. You may wish to try Googling \"How to round numbers in Python\".\n",
    "\n",
    "Good luck!\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "883b9f0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter temperature in Fahrenheit:  75.5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.5 degrees Fahrenheit is equal to 24.166666666666668 degrees Celsius.\n"
     ]
    }
   ],
   "source": [
    "\"\"\"Convert Fahrenheit to Celsius.\"\"\"\n",
    "\n",
    "# Ask user to enter a temperature in Fahrenheit\n",
    "temp = float(input(\"Enter temperature in Fahrenheit: \"))\n",
    "\n",
    "# Convert to celsius\n",
    "celsius = (temp - 32) * (5 / 9)\n",
    "\n",
    "print(f\"{temp} degrees Fahrenheit is equal to {celsius} degrees Celsius.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "854cda25-65f8-45fb-8509-cc939d6b6ef6",
   "metadata": {},
   "source": [
    "Exercise 3 - Think it like Euclid did\n",
    "-------------------------------------\n",
    "\n",
    "Have another look at Euclid's algorithm (from this week's presentation slides), which is used to find the highest common divisor of two numbers (i.e., the highest number that divides them both without a remainder). \n",
    "\n",
    "For each of the following starting points, mentally assign the numbers to `A` and `B` and then work through the stages of the algorithm to find the highest common divisor. You can use a pen and paper if it makes things easier.\n",
    "\n",
    "1. `A = 4`, `B = 2`\n",
    "2. `A = 8`, `B = 16`\n",
    "3. `A = 49`, `B = 35`\n",
    "4. `A = 240`, `B = 30`\n",
    "\n",
    "![](../images/euclid_algorithm.png)\n",
    "\n",
    "**Note:** The `>` symbol means greater than, and the &larr; symbol means \"assign the result of the expression on the right to the variable on the left\""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
