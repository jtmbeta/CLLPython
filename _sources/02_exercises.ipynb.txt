{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "99415803",
   "metadata": {},
   "source": [
    "# Week 2 - Exercises\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2a6bffd",
   "metadata": {},
   "source": [
    "## Exercise 1 - Implementing Euclid's algorithm\n",
    "\n",
    "In Week 0 we talked about Euclid's ancient algorithm for finding the greatest common divisor of two numbers. By now we have covered everything you need to be able to write it in Python! Here it is again in visual format (refer to the presentation slides if the image is not visible).\n",
    "\n",
    "![Euclid's algorithm](../images/euclid_algorithm.png)\n",
    "\n",
    "Implement the algorithm in the cell below. The final line should be a `print` statement that prints the highest common divisor of the numbers `A` and `B`.\n",
    "\n",
    "**Hint 1** - You can use the `input` statement to assign initial values to `A` and `B`\n",
    "\n",
    "**Hint 2** - `while`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fa25c5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Implement Euclid's algorithm here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8dd3d7d5",
   "metadata": {},
   "source": [
    "## Exercise 2 - Implement Euclid's algorithm as a function\n",
    "\n",
    "Now you have managed to implement Euclid's algorithm, try doing it as a function. Instead of using the `input` statement to take input from the user, the numbers `A` and `B` should be passed as arguments to a function. You could call the function something like `get_highest_common_divisor(A, B)`. \n",
    "\n",
    "Don't forget to include a docstring that provides a brief explanation of the function!\n",
    "\n",
    "**Hint** - `def`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9243a0b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define function here\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "230350d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Call function here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9b8ac21",
   "metadata": {},
   "source": [
    "## Exercise 3 - Fahrenheit to Celsius\n",
    "\n",
    "Previously we used a script to convert Fahrenheit to Celsius. Here it is again.\n",
    "\n",
    "```Python\n",
    "\"\"\"Convert Fahrenheit to Celsius.\"\"\"\n",
    "\n",
    "# Ask user to enter a temperature in Fahrenheit\n",
    "temp = float(input(\"Enter temperature in Fahrenheit: \"))\n",
    "\n",
    "# Convert to Celsius\n",
    "celsius = (temp - 32) * (5 / 9)\n",
    "celsius = round(celsius, 2)\n",
    "\n",
    "print(f\"{temp} degrees Fahrenheit is equal to {celsius} degrees Celsius.\")\n",
    "```\n",
    "\n",
    "Try and implement this as a function in the cell below. Rather than taking input from the user and printing the result, the function should take a temperature in Fahrenheit as a single argument and return the temperature in Celsius. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f914752b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define function here\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b311faae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Call function here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f52838f4",
   "metadata": {},
   "source": [
    "## Exercise 4 - Celsius to Fahrenheit\n",
    "\n",
    "Write another function that performs the reverse calculation. \n",
    "\n",
    "$Fahrenheit = (Celsius * 9/5) + 32$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac1bbe57",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define function here\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "799ec5eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Call function here\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
