{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "06c0082f",
   "metadata": {},
   "source": [
    "# Week 3 - Imports, the standard library, and third-party libraries\n",
    "\n",
    "When writing code, keep the DRY principle in mind.\n",
    "\n",
    "**DRY = Don't Repeat Yourself**\n",
    "\n",
    "Loops and functions are fantastic ways of not repeating yourself. Loops help you to avoid repeating yourself line for line, and functions help you avoid repeating yourself at several different places within a program. \n",
    "\n",
    "What happens if you find that you are repeating yourself in *separate programs*? In that case, you should use a module, or maybe even a collection of modules (known as a library). Modular code is generally more simple, maintainable and reusable, because it breaks down what may be a large problem into smaller separate problem domains, and it limits the number of places that code needs to be modified when fixing bugs or adding new functionality.\n",
    "\n",
    "## Modules and the `import` statement\n",
    "\n",
    "A Python module is basically a file with a `.py` extension that lives somewhere on your computer, and whose contents can be made available to the programmer via the `import` statement. In the first week, we encountered the `import` statement in its simplest form when using the `randrange` function from Python's built-in `random` module (to generate a random number for the guessing game).\n",
    "\n",
    "```Python\n",
    "import random\n",
    "\n",
    "num = random.randrange(1, 101)\n",
    "print(\"The number is\", num)\n",
    "```\n",
    "\n",
    "What happens in this code? \n",
    "\n",
    "First, we import the module `random`. This creates a new **namespace** for the module, which is basically a private symbol table, contained within the global namespace, which allows us to access all of the functionality of the `random` module via **dot notation**. \n",
    "\n",
    "Second, we use dot notation to access and call the `randrange` function, which chooses a random number between the two values specified. In this case, we pass `1` and `101` for a random number between 1 and 100. \n",
    "\n",
    "Finally, we print out the value of `num`.\n",
    "\n",
    "We can learn more about namespaces with help from the `dir()` builtin, which returns a list of the names in a defined namespace. Called without arguments, `dir()` returns a list of names in the current local namespace. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "be60202b-c40b-48e7-9438-4d07a278a176",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['In', 'Out', '_', '__', '___', '__builtin__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_dh', '_i', '_i1', '_ih', '_ii', '_iii', '_oh', 'exit', 'get_ipython', 'quit']\n"
     ]
    }
   ],
   "source": [
    "print(dir())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28c60bca-1105-470e-be3d-d57c3f336352",
   "metadata": {},
   "source": [
    "All elements of the above list are either Python's namespace defaults or special history / input caching variables of the IPython console. There is nothing that *we* put there. \n",
    "\n",
    "Now, let's run the random number code and repeat the call to `dir()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "10f88f39-18f1-407a-9842-578a693d3423",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number is 12\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "num = random.randrange(1, 101)\n",
    "print(\"The number is\", num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7dd80b89-16c8-46cd-935c-71e9795eab00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['In', 'Out', '_', '__', '___', '__builtin__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', '_dh', '_i', '_i1', '_i2', '_i3', '_i4', '_ih', '_ii', '_iii', '_oh', 'exit', 'get_ipython', 'num', 'quit', 'random']\n"
     ]
    }
   ],
   "source": [
    "print(dir())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9012c92c-6dac-40eb-b06e-c0f48856dbf2",
   "metadata": {},
   "source": [
    "Two more variables are now present in the local namespace: `random` and `num`. The former is the imported `random` module, and the latter is the number generated by `random.randrange`. Unsurprisingly, the type of `random` is `module`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c614779a-8462-40de-8673-1835853a023f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "module"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(random)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d2b1f69-54a9-43e3-9155-9135bfd32526",
   "metadata": {},
   "source": [
    "What happens when we call `dir()` on `random`?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "35e04e58-3613-413f-a9d1-2c403ea3df67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', '_Sequence', '_Set', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_accumulate', '_acos', '_bisect', '_ceil', '_cos', '_e', '_exp', '_floor', '_inst', '_log', '_os', '_pi', '_random', '_repeat', '_sha512', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_warn', 'betavariate', 'choice', 'choices', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'lognormvariate', 'normalvariate', 'paretovariate', 'randbytes', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate']\n"
     ]
    }
   ],
   "source": [
    "print(dir(random))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85172d8d-8f4c-48c7-98e1-2f894ed0a575",
   "metadata": {},
   "source": [
    "We get a list of all of the names in the `random` namespace, one of which is the `randrange` function. \n",
    "\n",
    "Hopefully this gives some insight into what namespaces are and why they are a good idea, but [click here](https://realpython.com/python-namespaces-scope/) for an article that explains them in further detail.\n",
    "\n",
    "---\n",
    "\n",
    "There are some other ways to use the `import` statement. Suppose we only need to import a single object from a module. In this scenario we can use the following syntax:\n",
    "\n",
    "```Python\n",
    "from <module_name> import <name>\n",
    "```\n",
    "\n",
    "This will import only the specified object and make it available in the local scope. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6bc21f0e-cfed-4235-a5c2-fd965db5257d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number is 82\n"
     ]
    }
   ],
   "source": [
    "from random import randrange  # Import only randrange\n",
    "\n",
    "num = randrange(1, 101)  # Call randrange directly\n",
    "print(\"The number is\", num)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bd1c8d8-f6d5-4fc5-a37f-2755c1bb6892",
   "metadata": {},
   "source": [
    "Now `randrange` exists in the local scope, so instead of accessing it via dot notation, we call it directly by typing its name.\n",
    "\n",
    "It is also possible to import *everything* from a module into the local namespace:\n",
    "\n",
    "```Python\n",
    "from <module_name> import *\n",
    "```\n",
    "\n",
    "But this is best avoided as it may lead to name collisions when working with large codebases, in which case one name will be overwritten by another. \n",
    "\n",
    "Sometimes it is convenient to assign alternative names to whatever we are importing. Usually this is either to avoid a collision with a name in the local scope, or simply because we can't be bothered typing out the full name of a module every time we want to access something from it. This can be done with the following syntax:\n",
    "\n",
    "```Python\n",
    "# Assign alternative name to an imported module\n",
    "import <module_name> as <alternative_name>\n",
    "\n",
    "# Assign alternative name to an object imported from a module\n",
    "from <module_name> import <name> as <alternative_name>  \n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c4d38e05-a607-4e08-a217-49256a6319c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number is 34\n"
     ]
    }
   ],
   "source": [
    "# Import the module 'random' and assign 'r' as alternative name\n",
    "import random as r  \n",
    "\n",
    "# Access randrange with dot notation on 'r'\n",
    "num = r.randrange(1, 101)\n",
    "print(\"The number is\", num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "60bdfd4b-48f6-446d-9b4c-f521ca94ebbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number is 65\n"
     ]
    }
   ],
   "source": [
    "# Import the function 'randrange' from the module 'random' \n",
    "# and assign 'rrg' as alternative name\n",
    "from random import randrange as rrg  \n",
    "\n",
    "num = rrg(1, 101)  # Call randrange via its new name\n",
    "print(\"The number is\", num)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bfd2e32-14c2-4218-90cc-348cbd8ce0ea",
   "metadata": {},
   "source": [
    "## The Standard Library\n",
    "\n",
    "[Python's standard library](https://docs.python.org/3/library/index.html) offers an extensive range of 'out-of-the-box' functionality, all of it accessible via the `import` statement described above. Some modules offer standardized solutions to everyday programming tasks, some provide access to system-level functionality, and others are so highly specialised that even the most experienced Python programmer may never use them. It all depends what problems you are working on.\n",
    "\n",
    "An example of a much-utilised module in the standard library is `datetime`, which provides tools for manipulating dates and times. That's a common task in every-day programming! Suppose we wanted to write a function that takes a person's date of birth and tells them exactly how many seconds old they are. Here's how we can do it using `datetime`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5c317ba4-d803-4795-8812-78de422bf0ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Congratulations, you are 1077910908 seconds old.\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "def age_calculator(year, month, day):\n",
    "    now = datetime.now()  # Get the current time\n",
    "    date_of_birth = datetime(year, month, day)  # Get time of birth\n",
    "    age_in_seconds = (now - date_of_birth).total_seconds()  # Calculate total seconds\n",
    "    print(f\"Congratulations, you are {int(age_in_seconds)} seconds old.\")  # Report result\n",
    "\n",
    "# Call the function\n",
    "age_calculator(1988, 8, 30)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21eb7e82-65ed-45b1-9287-e5a6cb6737b3",
   "metadata": {},
   "source": [
    "Some other examples of commonly depended-upon libraries are `os`, `sys`, `shutil`, `glob`, `math`, and `statistics`. Let's have a quick look at each of them.\n",
    "\n",
    "`os` (short for operating system), provides a consistent way of accessing operating system dependent functionality, regardless of what platform you are using (e.g., macOS, Linux, Windows). Here are a few examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0c7f55b9-5cb3-4369-9824-49d285aebc01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/jtm545/Projects/CLLPython/course_materials/notebooks\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "# Get the current working directory\n",
    "cwd = os.getcwd()\n",
    "print(cwd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c8676268-97cc-44ec-b507-4c18938bcd05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['03_imports_standard_library_PyPI.pdf',\n",
       " '00_introduction_to_the_python_programming_language.pdf',\n",
       " '.DS_Store',\n",
       " '02_worksheet.ipynb',\n",
       " '01_syntax_types_builtins.ipynb',\n",
       " '02_logic_operators_control_statements.pdf',\n",
       " '00_worksheet.pdf',\n",
       " '03_worksheet.ipynb',\n",
       " '03_worksheet.pdf',\n",
       " 'copy_of_00_worksheet.pdf',\n",
       " '00_introduction_to_the_python_programming_language.ipynb',\n",
       " '__pycache__',\n",
       " '03_more_about_functions.ipynb',\n",
       " '02_worksheet.pdf',\n",
       " '01_worksheet.ipynb',\n",
       " 'mymodule.py',\n",
       " '01_worksheet.pdf',\n",
       " '.ipynb_checkpoints',\n",
       " 'trigonometric_functions.csv',\n",
       " '01_syntax_types_builtins.pdf',\n",
       " '03_more_about_functions.pdf',\n",
       " '00_worksheet.ipynb',\n",
       " '02_logic_operators_control_statements.ipynb',\n",
       " '03_imports_standard_library_PyPI.ipynb']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List the contents of cwd\n",
    "os.listdir(cwd)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ec1ce03-ab55-456d-a323-5c0a5981d197",
   "metadata": {},
   "source": [
    "Read more about `os` here: https://docs.python.org/3/library/os.html#module-os\n",
    "\n",
    "---\n",
    "\n",
    "`sys` gives access to variables that are used or maintained by the Python interpreter as well as functions that interact with it. One use of `sys` is to examine the Python path, which is basically a list of folders on your computer that Python searches when you try to import something."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5ff4798b-6145-47fe-8f45-b3ce60511545",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['~/Desktop',\n",
       " '/Users/jtm545/Projects/CLLPython/course_materials/notebooks',\n",
       " '/Users/jtm545/opt/anaconda3/envs/py3/lib/python39.zip',\n",
       " '/Users/jtm545/opt/anaconda3/envs/py3/lib/python3.9',\n",
       " '/Users/jtm545/opt/anaconda3/envs/py3/lib/python3.9/lib-dynload',\n",
       " '',\n",
       " '/Users/jtm545/opt/anaconda3/envs/py3/lib/python3.9/site-packages',\n",
       " '/Users/jtm545/opt/anaconda3/envs/py3/lib/python3.9/site-packages/aeosa',\n",
       " '/Users/jtm545/opt/anaconda3/envs/py3/lib/python3.9/site-packages/IPython/extensions',\n",
       " '/Users/jtm545/.ipython']"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sys\n",
    "\n",
    "# Inspect the Python path\n",
    "sys.path"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e8acb54-d275-4982-b439-569349d14884",
   "metadata": {},
   "source": [
    "Read more about `sys` here: https://docs.python.org/3/library/sys.html#module-sys\n",
    "\n",
    "---\n",
    "\n",
    "`shutil` is useful for file and directory management tasks (e.g., copying, moving, removing, renaming)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a280f8a9-2bf9-4731-a678-4bddb06d33d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'copy_of_00_worksheet.pdf'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import shutil\n",
    "\n",
    "# Create a copy of the file '00_worksheet.pdf' under\n",
    "# the new name 'copy_of_00_worksheet.pdf'\n",
    "shutil.copyfile('00_worksheet.pdf', 'copy_of_00_worksheet.pdf')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75a65ec0-aae7-49e2-8838-5dd289e3f8ed",
   "metadata": {},
   "source": [
    "Read more about `shutil` here: https://docs.python.org/3/library/shutil.html\n",
    "\n",
    "---\n",
    "\n",
    "`glob` provides a function for getting a list of files that match a [wildcard](https://en.wikipedia.org/wiki/Wildcard_character) pattern.\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9f01e5cc-a0da-4ccf-9b60-439f2df18f38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['02_worksheet.ipynb',\n",
       " '01_syntax_types_builtins.ipynb',\n",
       " '03_worksheet.ipynb',\n",
       " '00_introduction_to_the_python_programming_language.ipynb',\n",
       " '03_more_about_functions.ipynb',\n",
       " '01_worksheet.ipynb',\n",
       " '00_worksheet.ipynb',\n",
       " '02_logic_operators_control_statements.ipynb',\n",
       " '03_imports_standard_library_PyPI.ipynb']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import glob\n",
    "\n",
    "# Get a list of all files in the current working directory\n",
    "# that have the .ipynb file extension\n",
    "glob.glob('*.ipynb')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "835b6757-d1c7-4db7-a3bb-9977b9dda8b4",
   "metadata": {},
   "source": [
    "Read more about `glob` here: https://docs.python.org/3/library/glob.html\n",
    "\n",
    "---\n",
    "\n",
    "The `math` library provides extended functionality for floating point arithmetic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d746e0d2-d573-4a25-b317-e054023ab8e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number pi is 3.141592653589793\n",
      "The square root of 42 is 6.48074069840786\n",
      "180 degrees in radians is 3.141592653589793\n",
      "The greatest common divisor of 42 and 56 is 14\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "print(\"The number pi is\", math.pi)\n",
    "print(\"The square root of 42 is\", math.sqrt(42))\n",
    "print(\"180 degrees in radians is\", math.radians(180))\n",
    "# Here's a familiar function\n",
    "print(\"The greatest common divisor of 42 and 56 is\", math.gcd(42, 56))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33a37cee-30b7-4ddc-9050-dab4f24bf670",
   "metadata": {},
   "source": [
    "Read more about `math` here: https://docs.python.org/3/library/math.html\n",
    "\n",
    "---\n",
    "\n",
    "The `statistics` library supports calculation of basic statistics on numeric data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b57f92f9-40ab-4ff4-a643-952df9e05535",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "numbers:  [2, 86, 44.7, 389, 3, 7, 87, 74, 3, 55, 3.6, 32, 75, 8.3]\n",
      "The mean is 62.114285714285714\n",
      "The median is 38.35\n",
      "The mode is 3\n",
      "The variance is  9967.104395604396\n",
      "The standard deviation is  99.83538648998358\n"
     ]
    }
   ],
   "source": [
    "import statistics\n",
    "\n",
    "# Some numbers\n",
    "numbers = [2, 86, 44.7, 389, 3, 7, 87, 74, 3, 55, 3.6, 32, 75, 8.3]\n",
    "\n",
    "print(\"numbers: \", numbers)\n",
    "print(\"The mean is\", statistics.mean(numbers))\n",
    "print(\"The median is\", statistics.median(numbers))\n",
    "print(\"The mode is\", statistics.mode(numbers))\n",
    "print(\"The variance is \", statistics.variance(numbers))\n",
    "print(\"The standard deviation is \", statistics.stdev(numbers))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62fd279c-9f5e-4564-bb69-828b41066aee",
   "metadata": {},
   "source": [
    "Read more about `statistics` here: https://docs.python.org/3/library/statistics.html\n",
    "\n",
    "---\n",
    "\n",
    "That was only a whirlwind tour of the standard library. Each of these modules has a ton of functionality that you may, or may not, encounter in your time as a Python programmer. Try exploring each of the above libraries in further detail. Here are some others that I use frequently.\n",
    "\n",
    "  - Learn about the `calendar` library: https://docs.python.org/3/library/calendar.html\n",
    "  - Learn about the `itertools` library: https://docs.python.org/3/library/itertools.html\n",
    "  - Learn about the `pathlib` library: https://docs.python.org/3/library/pathlib.html\n",
    "  - Learn about the `pickle` library: https://docs.python.org/3/library/pickle.html\n",
    "  - Learn about the `time` library: https://docs.python.org/3/library/time.html\n",
    "  - Learn about the `csv` library: https://docs.python.org/3/library/csv.html\n",
    "  - Learn more about the `re` library: https://docs.python.org/3/library/re.html"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f72ac8d6-203c-4879-8ce5-93e9e33e13e4",
   "metadata": {},
   "source": [
    "## The Python Package Index (PyPI)\n",
    "\n",
    "Sometimes, the standard library doesn't have what you need, in which case you may consult the [Python Package Index](https://pypi.org/)&mdash;an online repository for code that has been developed and shared by the wider Python community. It is currently home to over 400,000 projects, so the chances are that one of them will help to solve your problem 'out-of-the-box', or at least inspire you with the means to solve it yourself. \n",
    "\n",
    "Here's a good example that I encountered when preparing this document. Previously, we used the `datetime` module from Python's standard library to write a function that, given somebody's date of birth, reports how many seconds old that person is. For my own date of birth, the number was so big that I personally found it difficult to appreciate. It occurred to me that it would be easier to appreciate the number if it was presented in written form, but I could find nothing in Python's standard library to support this. I thought to myself that this problem *must* have already been solved in Python, so I performed the following Google search:\n",
    "\n",
    "> *python convert integer to written number*\n",
    "\n",
    "Which lead me to [this page](https://stackoverflow.com/questions/8982163/how-do-i-tell-python-to-convert-integers-into-words), which in turn informed me of the `inflect` module. I [looked it up on PyPI](https://pypi.org/project/inflect/) and found the following description:\n",
    "\n",
    "> `inflect.py` - *Correctly generate plurals, singular nouns, ordinals, indefinite articles;* ***convert numbers to words***\n",
    "\n",
    "That's just what I need, so I installed `inflect` using the `pip` packaging tool.\n",
    "\n",
    "---\n",
    "\n",
    "_**NOTE:**_ `pip` is a package management system for Python, and the recommended tool for installing Python packages from the Python Package Index. If you know the name of the package you want to install from PyPI, all you need to do is type `pip install <package_name>` at the command line and `pip` will get the job done. In the cell below, `pip` is invoked with a `!` at the start of the line, which escapes the Jupyter console and executes the program at the level of the underlying operating system. We installed Python with anaconda, which actually has its own package management system called `conda`. We will mostly use `conda` to install packages (e.g., via Anaconda Navigator), but `pip` is good to know about as it is considered the *de facto* tool for managing packages in Python (and it can be used alongside `conda`). \n",
    "\n",
    "  - `pip` - [Click here to learn more](https://pip.pypa.io/en/stable/getting-started/)\n",
    "  - `conda` - [Click here to learn more](https://docs.conda.io/en/latest/)\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "57490736-37ef-4df6-9f8a-4f4706dc7336",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting inflect\n",
      "  Downloading inflect-6.0.2-py3-none-any.whl (34 kB)\n",
      "Collecting pydantic>=1.9.1\n",
      "  Downloading pydantic-1.10.2-cp39-cp39-macosx_10_9_x86_64.whl (3.2 MB)\n",
      "\u001b[2K     \u001b[38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.2/3.2 MB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0mm eta \u001b[36m0:00:01\u001b[0m[36m0:00:01\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: typing-extensions>=4.1.0 in /Users/jtm545/opt/anaconda3/envs/py3/lib/python3.9/site-packages (from pydantic>=1.9.1->inflect) (4.3.0)\n",
      "Installing collected packages: pydantic, inflect\n",
      "Successfully installed inflect-6.0.2 pydantic-1.10.2\n"
     ]
    }
   ],
   "source": [
    "# Install the inflect library\n",
    "!pip install inflect"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63245a55-c6cd-4f78-99b2-1b9e366c201b",
   "metadata": {},
   "source": [
    "Perfect, the `inflect` library was successfully installed into my current Python environment. Referring to the example from the previous Google search, I modified the function so that it would tell me how many seconds old I am, **but now in words**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c651c89a-ae68-4ade-ac9b-4ba5808c1e47",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Congratulations, you are one billion, two hundred and sixty-three million, nine hundred and thirty-one thousand, one hundred and thirty seconds old.\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "import inflect\n",
    "\n",
    "def age_calculator(year, month, day):\n",
    "    now = datetime.datetime.now()\n",
    "    date_of_birth = datetime.datetime(year, month, day)\n",
    "    age_in_seconds = (now - date_of_birth).total_seconds()\n",
    "    p = inflect.engine()\n",
    "    age_in_seconds = p.number_to_words(int(age_in_seconds))\n",
    "    print(f\"Congratulations, you are {age_in_seconds} seconds old.\")\n",
    "    \n",
    "age_calculator(1982, 10, 8)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e234c1ff-c2a6-42ac-9f72-9ffe7f3c9b06",
   "metadata": {},
   "source": [
    "Obviously, a shrewd programmer would check carefully that a third-party library is up to scratch before depending on it for their own project. The best way to do this is to check that the library has an active community, that it is still being maintained, and ideally that it has a comprehensive testing suite. This information can usually be gleaned from the project's page on PyPI, or its homepage on another website, such as [GitHub](https://github.com/)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78407b7e-7376-4970-827d-2a758d7eb60a",
   "metadata": {},
   "source": [
    "## numpy, matplotlib, and pandas\n",
    "\n",
    "Now is a good time to introduce the libraries that we will be using for the rest of this course.\n",
    "\n",
    "  - [numpy](https://numpy.org/) is the core numerical computing package for Python. It provides fast and versatile N-dimensional arrays as well as a comprehensive collection of mathematical functions and routines.\n",
    "  \n",
    "  - [matplotlib](https://matplotlib.org/) is a powerful plotting library for creating plots, charts, and other visualisations.\n",
    "  \n",
    "  - [pandas](https://pandas.pydata.org/) is an advanced package for handling, manipulating, and analysing large datasets. \n",
    "\n",
    "To install these libraries, launch the Anaconda Navigator App and activate your Python environment. On the environments tab, check the list of the packages to see whether numpy, pandas and matplotlib are already installed. If they are not, search for them and complete the install. We will learn more about these packages in the next 4 weeks, but for now, here's some code to get you thinking. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "id": "dea63965-5b83-4afd-beca-b328c4023fc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            sine    cosine       tangent\n",
      "0   0.000000e+00  1.000000  0.000000e+00\n",
      "1   6.342392e-02  0.997987  6.355187e-02\n",
      "2   1.265925e-01  0.991955  1.276192e-01\n",
      "3   1.892512e-01  0.981929  1.927342e-01\n",
      "4   2.511480e-01  0.967949  2.594642e-01\n",
      "..           ...       ...           ...\n",
      "95 -2.511480e-01  0.967949 -2.594642e-01\n",
      "96 -1.892512e-01  0.981929 -1.927342e-01\n",
      "97 -1.265925e-01  0.991955 -1.276192e-01\n",
      "98 -6.342392e-02  0.997987 -6.355187e-02\n",
      "99 -2.449294e-16  1.000000 -2.449294e-16\n",
      "\n",
      "[100 rows x 3 columns]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Use numpy to create data for three trigonometric functions\n",
    "x = np.linspace(0, 2*np.pi, 100)\n",
    "degrees = np.rad2deg(x)\n",
    "sine = np.sin(x)\n",
    "cosine = np.cos(x)\n",
    "tangent = np.tan(x)\n",
    "\n",
    "# Use matplotlib to plot the data\n",
    "fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 3))\n",
    "\n",
    "ax1.plot(x, sine, linewidth=2.0, color='b', linestyle=':')\n",
    "ax1.set_ylabel('sin(x)')\n",
    "\n",
    "ax2.plot(x, cosine, linewidth=2.0, color='r', linestyle='--')\n",
    "ax2.set_ylabel('cos(x)')\n",
    "\n",
    "ax3.plot(x, tangent, linewidth=2.0, color='g', linestyle='-')\n",
    "ax3.set_ylabel('tan(x)')\n",
    "\n",
    "for ax in (ax1, ax2, ax3):\n",
    "    ax.set_xlabel('x (radians)')\n",
    "    \n",
    "fig.suptitle('Trigonometric functions')\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "# Create a pandas DataFrame to store the data and save\n",
    "df = pd.DataFrame(\n",
    "    {\n",
    "        \"sine\": sine,\n",
    "        \"cosine\": cosine,\n",
    "        \"tangent\": tangent\n",
    "    }\n",
    ")\n",
    "\n",
    "print(df)\n",
    "df.to_csv('./trigonometric_functions.csv', index=None)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
