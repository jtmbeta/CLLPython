{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "17660f21-4345-4165-95c7-ea103da60d1e",
   "metadata": {},
   "source": [
    "# Week 6 - More about `pandas`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3f22587f-b39f-4d96-9b89-16e89d4a0915",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "plt.style.use('bmh')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6135fba-2096-4675-aa56-f4fef4ad3bb4",
   "metadata": {},
   "source": [
    "We've looked at `Series`, `DataFrame`, how to view, select and index data, and how to make plots with `pandas`. Now we will look at time series data, which `pandas` is simply brilliant for working with. \n",
    "\n",
    "'Time series data' refers to any form of data that is represented or indexed with ordered timestamps. Examples include stock prices, electrical activity in the brain, and temperature throughout the day. As you might have guessed, this involves dates, times, and differences between them.\n",
    "\n",
    "## `Timestamp` and `Timedelta`\n",
    "\n",
    "In `pandas`, dates and times are represented with `pd.Timestamp`, which is a replacement for Python's native `datetime.datetime` object. The two are interchangeable in many respects, but a key difference is that `pd.Timestamp` uses NumPy's `datetime64` and `timedelta64` data types and incorporates a much wider range of functionality and powerful features for creating and manipulating time series. \n",
    "\n",
    "---\n",
    "\n",
    ">  - `pd.Timestamp` - [Read more here](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timestamp.html)\n",
    ">  - `datetime.datetime` - [Read more here](https://docs.python.org/3/library/datetime.html)\n",
    ">  - `datetime64` and `timedelta64` - [Read more here](https://numpy.org/doc/stable/reference/arrays.datetime.html)\n",
    " \n",
    "---\n",
    "\n",
    "Let's create timestamps to mark two memorable points in history. The First World War ended in 1918 at the eleventh hour of the eleventh day of the eleventh month, and the Second World War ended on the 08 May at one-minute past 11 in the evening. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "58f3e76c-9e96-453f-81cf-f5479069645c",
   "metadata": {},
   "outputs": [],
   "source": [
    "end_of_ww1 = pd.Timestamp('1918-11-11 11:00:00')  # Armistice Day\n",
    "end_of_ww2 = pd.Timestamp('1945-05-08 23:01:00')  # VE Day"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49c0fc43-dce2-48e0-b857-0d6269af6072",
   "metadata": {},
   "source": [
    "`Timestamp` data have many useful methods. An especially useful method is `.strftime()`, which creates a `str` representation of a timestamp using various formatting codes. Here are some examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e1be1eae-e10b-4a7a-b1c2-bd03403fa0ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The First World War ended 11 November 1918 at 11:00 AM\n",
      "The Second World War ended 08 May 1945 at 11:01 PM\n"
     ]
    }
   ],
   "source": [
    "print(\"The First World War ended\", end_of_ww1.strftime('%d %B %Y'), \"at\", end_of_ww1.strftime('%I:%M %p'))\n",
    "print(\"The Second World War ended\", end_of_ww2.strftime('%d %B %Y'), \"at\", end_of_ww2.strftime('%I:%M %p'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f275c089-5683-4c10-8d3b-5f2278aa90f1",
   "metadata": {},
   "source": [
    "Here, the `%` symbols and subsequent characters tell the `strftime()` method how to represent the timestamp. You may wish to experiment with [other formatting codes](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior) to format the timestamps in different ways. Copy the above code into the cell below and try to format the dates using abbreviated month names and 24-hour time."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90dade08-e58a-4722-a484-b9ec8a896121",
   "metadata": {},
   "source": [
    "If you are a history buff, you may already know the day of the week when each of The Great Wars ended. If not, you can find out using the `pd.Timestamp.day_name()` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "77e2b372-125e-449b-b863-29e0c7db1c92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The First World War ended on a Monday\n",
      "The Second World War ended on a Tuesday\n"
     ]
    }
   ],
   "source": [
    "print('The First World War ended on a', end_of_ww1.day_name())\n",
    "print('The Second World War ended on a', end_of_ww2.day_name())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e483029-e313-4a55-b0fe-dedfcbd40a28",
   "metadata": {},
   "source": [
    "If we have two timestamps, we can calculate the difference between them, which is known as a `Timedelta`. Let's do this to find out how much time elapsed between the end of the First and Second World Wars."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4f819829-3be5-4253-b155-b92babe6c0f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time between the end of the First and Second World Wars:\n",
      "9675 days and 43260 seconds\n"
     ]
    }
   ],
   "source": [
    "tdelta = end_of_ww2 - end_of_ww1  # Subtract the end of WW1 from the end of WW2\n",
    "print('Time between the end of the First and Second World Wars:')\n",
    "print(f'{tdelta.days} days and {tdelta.seconds} seconds')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08cdb300-8331-49ce-a47f-ed968f864b3b",
   "metadata": {},
   "source": [
    "A `Timedelta` behaves like a number in many respects and can be operated on with most mathematical operators. But there are restrictions. For example, one can divide or multiply a `Timedelta` by any number, but addition and subtraction can only take place with other `Timestamp` or `Timedelta` objects. If you think about it, this makes perfect sense."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "06b458a5-8d23-4e5f-8329-043bfae5077b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time between end of WW1 and WW2:  9675 days 12:01:00\n",
      "Multiplied by 3:                  29026 days 12:03:00\n",
      "Divided by 2:                     4837 days 18:00:30\n",
      "Added to itself:                  19351 days 00:02:00\n",
      "Minus twice itself:               -9676 days +11:59:00\n"
     ]
    }
   ],
   "source": [
    "print('Time between end of WW1 and WW2: ', tdelta)\n",
    "print('Multiplied by 3:                 ', tdelta * 3)\n",
    "print('Divided by 2:                    ', tdelta / 2)\n",
    "print('Added to itself:                 ', tdelta + tdelta)\n",
    "print('Minus twice itself:              ', tdelta - (tdelta * 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cb546b1-d3a2-4f2e-b79a-c8af04818623",
   "metadata": {},
   "source": [
    "If you try to perform an operation that is not supported, such as raising a `Timedelta` to some power or multiplying two `Timedelta`'s together, you will get an error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0204b4dc-a367-46d0-b8c1-e1bfe7e8339c",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for ** or pow(): 'Timedelta' and 'int'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/c9/7yddvl1n2ss863cgfngj0wpm0000gp/T/ipykernel_41875/977053077.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtdelta\u001b[0m \u001b[0;34m**\u001b[0m \u001b[0;36m2\u001b[0m  \u001b[0;31m# Can not raise a Timedelta to a power...\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for ** or pow(): 'Timedelta' and 'int'"
     ]
    }
   ],
   "source": [
    "tdelta ** 2  # Can not raise a Timedelta to a power..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49bfca27-2961-479d-b0c1-f65c9e79adef",
   "metadata": {},
   "source": [
    "In case you are wondering, leap years and other time-related idiosyncrasies are dealt with implicitly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f7a2e321-6d3d-4950-b3ed-56bd1fde65fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29 February 2020\n"
     ]
    }
   ],
   "source": [
    "leap_year = pd.Timestamp('27 Feb 2020')  # 2020 was a leap year\n",
    "print((leap_year + pd.Timedelta('2D')).strftime('%d %B %Y'))  # Add 2 days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2b3c4b0a-1541-44ab-af7b-52a8b4e4afe7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "01 March 2021\n"
     ]
    }
   ],
   "source": [
    "not_a_leap_year = pd.Timestamp('27 Feb 2021')  # 2021 wasn't a leap year\n",
    "print((not_a_leap_year + pd.Timedelta('2D')).strftime('%d %B %Y'))  # Add 2 days"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c2103ce-de3d-4396-a6c2-e651df8661f9",
   "metadata": {},
   "source": [
    "## Working with dates and times"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64d8c41b-089d-4257-8527-4477effd1ad0",
   "metadata": {},
   "source": [
    "Previously we have encountered functions such as `range()` and `np.linspace()`, which produce sequences of evenly-spaced numeric data. In `pandas`, we can do the same with dates using the `pd.date_range(...)` function. Let's use it to create a timestamp for every day of this year. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "725608f4-2383-442c-baed-e69a035e72bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04',\n",
       "               '2022-01-05', '2022-01-06', '2022-01-07', '2022-01-08',\n",
       "               '2022-01-09', '2022-01-10',\n",
       "               ...\n",
       "               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n",
       "               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n",
       "               '2022-12-30', '2022-12-31'],\n",
       "              dtype='datetime64[ns]', length=365, freq='D')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D', inclusive='both')\n",
    "ts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e100490b-f83f-4762-9abd-f350ec198bf1",
   "metadata": {},
   "source": [
    "The result is a `DatetimeIndex`, which may be used as the index for a `Series` or `DataFrame`. Let's work some magic on these timestamps to get a list of all future dates for this year in long-format. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f0c6c73b-3681-44b7-9452-c8f08dbc9560",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Wednesday 21 December 2022',\n",
       " 'Thursday 22 December 2022',\n",
       " 'Friday 23 December 2022',\n",
       " 'Saturday 24 December 2022',\n",
       " 'Sunday 25 December 2022',\n",
       " 'Monday 26 December 2022',\n",
       " 'Tuesday 27 December 2022',\n",
       " 'Wednesday 28 December 2022',\n",
       " 'Thursday 29 December 2022',\n",
       " 'Friday 30 December 2022',\n",
       " 'Saturday 31 December 2022']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get all future dates for this year and format them nicely\n",
    "ts[ts > pd.Timestamp.now()].strftime('%A %d %B %Y').tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77bb10ab-2972-4eed-8c3d-a9f1bc78eacc",
   "metadata": {},
   "source": [
    "As you can see, a `DatetimeIndex` is a powerful and flexible tool for representing dates and times. When it really starts to shine is when it is used as the index for time series data, so let's invent some."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8440f91-44d7-4459-a625-1df74c0a6a15",
   "metadata": {},
   "source": [
    "Imagine there is a shop that opened at the turn of the millennium which sells apples, bananas and cakes. At the time of opening, these items were sold at the respective prices of £0.45, £0.28, and £0.62 per item, but there's been some inflation over time. Each day, a random(ish) number of each item is sold. Cakes are most popular, then bananas, then apples. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "1726450a-e18c-4581-9ced-c6a7338e9e19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>apples_sold</th>\n",
       "      <th>bananas_sold</th>\n",
       "      <th>cakes_sold</th>\n",
       "      <th>cost_of_apple</th>\n",
       "      <th>cost_of_banana</th>\n",
       "      <th>cost_of_cake</th>\n",
       "      <th>apples_profit</th>\n",
       "      <th>bananas_profit</th>\n",
       "      <th>cakes_profit</th>\n",
       "      <th>total_profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2000-01-01</td>\n",
       "      <td>199</td>\n",
       "      <td>347</td>\n",
       "      <td>539</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>89.55</td>\n",
       "      <td>97.16</td>\n",
       "      <td>334.18</td>\n",
       "      <td>520.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2000-01-02</td>\n",
       "      <td>179</td>\n",
       "      <td>19</td>\n",
       "      <td>693</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>80.56</td>\n",
       "      <td>5.32</td>\n",
       "      <td>429.71</td>\n",
       "      <td>515.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2000-01-03</td>\n",
       "      <td>178</td>\n",
       "      <td>215</td>\n",
       "      <td>447</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>80.12</td>\n",
       "      <td>60.21</td>\n",
       "      <td>277.21</td>\n",
       "      <td>417.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2000-01-04</td>\n",
       "      <td>22</td>\n",
       "      <td>165</td>\n",
       "      <td>578</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>9.90</td>\n",
       "      <td>46.22</td>\n",
       "      <td>358.49</td>\n",
       "      <td>414.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2000-01-05</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>294</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>10.36</td>\n",
       "      <td>0.28</td>\n",
       "      <td>182.37</td>\n",
       "      <td>193.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8032</th>\n",
       "      <td>2021-12-28</td>\n",
       "      <td>157</td>\n",
       "      <td>6</td>\n",
       "      <td>411</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.68</td>\n",
       "      <td>191.95</td>\n",
       "      <td>4.56</td>\n",
       "      <td>692.33</td>\n",
       "      <td>888.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8033</th>\n",
       "      <td>2021-12-29</td>\n",
       "      <td>1</td>\n",
       "      <td>255</td>\n",
       "      <td>106</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.68</td>\n",
       "      <td>1.22</td>\n",
       "      <td>194.01</td>\n",
       "      <td>178.58</td>\n",
       "      <td>373.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8034</th>\n",
       "      <td>2021-12-30</td>\n",
       "      <td>71</td>\n",
       "      <td>326</td>\n",
       "      <td>545</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.68</td>\n",
       "      <td>86.83</td>\n",
       "      <td>248.06</td>\n",
       "      <td>918.28</td>\n",
       "      <td>1253.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8035</th>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>106</td>\n",
       "      <td>36</td>\n",
       "      <td>617</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.69</td>\n",
       "      <td>129.65</td>\n",
       "      <td>27.40</td>\n",
       "      <td>1039.72</td>\n",
       "      <td>1196.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8036</th>\n",
       "      <td>2022-01-01</td>\n",
       "      <td>167</td>\n",
       "      <td>169</td>\n",
       "      <td>40</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.69</td>\n",
       "      <td>204.28</td>\n",
       "      <td>128.63</td>\n",
       "      <td>67.41</td>\n",
       "      <td>400.32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8037 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           date  apples_sold  bananas_sold  cakes_sold  cost_of_apple  \\\n",
       "0    2000-01-01          199           347         539           0.45   \n",
       "1    2000-01-02          179            19         693           0.45   \n",
       "2    2000-01-03          178           215         447           0.45   \n",
       "3    2000-01-04           22           165         578           0.45   \n",
       "4    2000-01-05           23             1         294           0.45   \n",
       "...         ...          ...           ...         ...            ...   \n",
       "8032 2021-12-28          157             6         411           1.22   \n",
       "8033 2021-12-29            1           255         106           1.22   \n",
       "8034 2021-12-30           71           326         545           1.22   \n",
       "8035 2021-12-31          106            36         617           1.22   \n",
       "8036 2022-01-01          167           169          40           1.22   \n",
       "\n",
       "      cost_of_banana  cost_of_cake  apples_profit  bananas_profit  \\\n",
       "0               0.28          0.62          89.55           97.16   \n",
       "1               0.28          0.62          80.56            5.32   \n",
       "2               0.28          0.62          80.12           60.21   \n",
       "3               0.28          0.62           9.90           46.22   \n",
       "4               0.28          0.62          10.36            0.28   \n",
       "...              ...           ...            ...             ...   \n",
       "8032            0.76          1.68         191.95            4.56   \n",
       "8033            0.76          1.68           1.22          194.01   \n",
       "8034            0.76          1.68          86.83          248.06   \n",
       "8035            0.76          1.69         129.65           27.40   \n",
       "8036            0.76          1.69         204.28          128.63   \n",
       "\n",
       "      cakes_profit  total_profit  \n",
       "0           334.18        520.89  \n",
       "1           429.71        515.59  \n",
       "2           277.21        417.54  \n",
       "3           358.49        414.61  \n",
       "4           182.37        193.01  \n",
       "...            ...           ...  \n",
       "8032        692.33        888.84  \n",
       "8033        178.58        373.81  \n",
       "8034        918.28       1253.17  \n",
       "8035       1039.72       1196.76  \n",
       "8036         67.41        400.32  \n",
       "\n",
       "[8037 rows x 11 columns]"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Initial cost in year 2000\n",
    "cost_of_apple = 0.45\n",
    "cost_of_banana = 0.28\n",
    "cost_of_cake = 0.62\n",
    "\n",
    "# Create a range of dates from 2000 to 2022 with 1-day frequency.\n",
    "# This means we will have a row for every day.\n",
    "dates = pd.date_range('2000', '2022', freq='1D')\n",
    "number_of_days = len(dates)\n",
    "\n",
    "# Create the DataFrame\n",
    "df = pd.DataFrame(\n",
    "    {    \n",
    "        'date': dates,\n",
    "        'apples_sold': np.random.randint(0, 200, number_of_days),\n",
    "        'bananas_sold': np.random.randint(0, 350, number_of_days),\n",
    "        'cakes_sold': np.random.randint(0, 700, number_of_days),\n",
    "        'cost_of_apple' : cost_of_apple,\n",
    "        'cost_of_banana': cost_of_banana,\n",
    "        'cost_of_cake': cost_of_cake\n",
    "    }, \n",
    ")\n",
    "\n",
    "# Adjust costs for inflation\n",
    "cost_cols = ['cost_of_apple', 'cost_of_banana', 'cost_of_cake']\n",
    "inflation = np.exp(np.linspace(0, 1, number_of_days))\n",
    "df[cost_cols] = df[cost_cols].mul(inflation, axis=0)\n",
    "\n",
    "# New columns for profit\n",
    "df['apples_profit'] = df['apples_sold'] * df['cost_of_apple']\n",
    "df['bananas_profit'] = df['bananas_sold'] * df['cost_of_banana']\n",
    "df['cakes_profit'] = df['cakes_sold'] * df['cost_of_cake']\n",
    "df['total_profit'] = df.apples_profit + df.bananas_profit + df.cakes_profit\n",
    "df = df.round(2)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7f2b539-e976-4ce4-bfc2-06773ff678ea",
   "metadata": {},
   "source": [
    "Now, if we look at the data types of the `DataFrame`, we can see that the `date` column has type `datetime64[ns]`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "050feb48-1462-4a60-8452-7a4cfc14f6b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date              datetime64[ns]\n",
       "apples_sold                int64\n",
       "bananas_sold               int64\n",
       "cakes_sold                 int64\n",
       "cost_of_apple            float64\n",
       "cost_of_banana           float64\n",
       "cost_of_cake             float64\n",
       "apples_profit            float64\n",
       "bananas_profit           float64\n",
       "cakes_profit             float64\n",
       "total_profit             float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89ddb25b-f4c2-4761-9fbd-223b36c3ec77",
   "metadata": {},
   "source": [
    "When working with the world population and titanic datasets, we used the `str` accessor method to interface with additional string methods (e.g., `df['name'].str.contains('Smith')`). For datetime-like data, there is a `dt` accessor method, which opens the door to datetime functionality. Below, we use the `dt` accessor method to create a separate column containing the day of the week, the year, and the fiscal year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "bf186e21-2ff3-4f94-92b9-e9e87952c8dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>apples_sold</th>\n",
       "      <th>bananas_sold</th>\n",
       "      <th>cakes_sold</th>\n",
       "      <th>cost_of_apple</th>\n",
       "      <th>cost_of_banana</th>\n",
       "      <th>cost_of_cake</th>\n",
       "      <th>apples_profit</th>\n",
       "      <th>bananas_profit</th>\n",
       "      <th>cakes_profit</th>\n",
       "      <th>total_profit</th>\n",
       "      <th>Day</th>\n",
       "      <th>Year</th>\n",
       "      <th>Fiscal Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8032</th>\n",
       "      <td>2021-12-28</td>\n",
       "      <td>157</td>\n",
       "      <td>6</td>\n",
       "      <td>411</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.68</td>\n",
       "      <td>191.95</td>\n",
       "      <td>4.56</td>\n",
       "      <td>692.33</td>\n",
       "      <td>888.84</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>2021</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8033</th>\n",
       "      <td>2021-12-29</td>\n",
       "      <td>1</td>\n",
       "      <td>255</td>\n",
       "      <td>106</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.68</td>\n",
       "      <td>1.22</td>\n",
       "      <td>194.01</td>\n",
       "      <td>178.58</td>\n",
       "      <td>373.81</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>2021</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8034</th>\n",
       "      <td>2021-12-30</td>\n",
       "      <td>71</td>\n",
       "      <td>326</td>\n",
       "      <td>545</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.68</td>\n",
       "      <td>86.83</td>\n",
       "      <td>248.06</td>\n",
       "      <td>918.28</td>\n",
       "      <td>1253.17</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>2021</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8035</th>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>106</td>\n",
       "      <td>36</td>\n",
       "      <td>617</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.69</td>\n",
       "      <td>129.65</td>\n",
       "      <td>27.40</td>\n",
       "      <td>1039.72</td>\n",
       "      <td>1196.76</td>\n",
       "      <td>Friday</td>\n",
       "      <td>2021</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8036</th>\n",
       "      <td>2022-01-01</td>\n",
       "      <td>167</td>\n",
       "      <td>169</td>\n",
       "      <td>40</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.69</td>\n",
       "      <td>204.28</td>\n",
       "      <td>128.63</td>\n",
       "      <td>67.41</td>\n",
       "      <td>400.32</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>2022</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           date  apples_sold  bananas_sold  cakes_sold  cost_of_apple  \\\n",
       "8032 2021-12-28          157             6         411           1.22   \n",
       "8033 2021-12-29            1           255         106           1.22   \n",
       "8034 2021-12-30           71           326         545           1.22   \n",
       "8035 2021-12-31          106            36         617           1.22   \n",
       "8036 2022-01-01          167           169          40           1.22   \n",
       "\n",
       "      cost_of_banana  cost_of_cake  apples_profit  bananas_profit  \\\n",
       "8032            0.76          1.68         191.95            4.56   \n",
       "8033            0.76          1.68           1.22          194.01   \n",
       "8034            0.76          1.68          86.83          248.06   \n",
       "8035            0.76          1.69         129.65           27.40   \n",
       "8036            0.76          1.69         204.28          128.63   \n",
       "\n",
       "      cakes_profit  total_profit        Day  Year  Fiscal Year  \n",
       "8032        692.33        888.84    Tuesday  2021         2022  \n",
       "8033        178.58        373.81  Wednesday  2021         2022  \n",
       "8034        918.28       1253.17   Thursday  2021         2022  \n",
       "8035       1039.72       1196.76     Friday  2021         2022  \n",
       "8036         67.41        400.32   Saturday  2022         2022  "
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Day'] = df['date'].dt.day_name()  # Get day of week\n",
    "df['Year'] = df['date'].dt.year  # Get current year\n",
    "df['Fiscal Year'] = df['date'].dt.to_period('Q-APR').dt.qyear  # Get fiscal year\n",
    "df.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43932940-fd93-4654-81cd-65114a2350de",
   "metadata": {},
   "source": [
    "We now have three new and useful columns in our `DataFrame`. At the moment, the original `date` column is just a column of data, but what we really need is for it to be our index. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "8e168318-9830-480e-85d7-6d4f3ce2731d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apples_sold</th>\n",
       "      <th>bananas_sold</th>\n",
       "      <th>cakes_sold</th>\n",
       "      <th>cost_of_apple</th>\n",
       "      <th>cost_of_banana</th>\n",
       "      <th>cost_of_cake</th>\n",
       "      <th>apples_profit</th>\n",
       "      <th>bananas_profit</th>\n",
       "      <th>cakes_profit</th>\n",
       "      <th>total_profit</th>\n",
       "      <th>Day</th>\n",
       "      <th>Year</th>\n",
       "      <th>Fiscal Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-01</th>\n",
       "      <td>199</td>\n",
       "      <td>347</td>\n",
       "      <td>539</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>89.55</td>\n",
       "      <td>97.16</td>\n",
       "      <td>334.18</td>\n",
       "      <td>520.89</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-02</th>\n",
       "      <td>179</td>\n",
       "      <td>19</td>\n",
       "      <td>693</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>80.56</td>\n",
       "      <td>5.32</td>\n",
       "      <td>429.71</td>\n",
       "      <td>515.59</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-03</th>\n",
       "      <td>178</td>\n",
       "      <td>215</td>\n",
       "      <td>447</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>80.12</td>\n",
       "      <td>60.21</td>\n",
       "      <td>277.21</td>\n",
       "      <td>417.54</td>\n",
       "      <td>Monday</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-04</th>\n",
       "      <td>22</td>\n",
       "      <td>165</td>\n",
       "      <td>578</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>9.90</td>\n",
       "      <td>46.22</td>\n",
       "      <td>358.49</td>\n",
       "      <td>414.61</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05</th>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>294</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>10.36</td>\n",
       "      <td>0.28</td>\n",
       "      <td>182.37</td>\n",
       "      <td>193.01</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-28</th>\n",
       "      <td>157</td>\n",
       "      <td>6</td>\n",
       "      <td>411</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.68</td>\n",
       "      <td>191.95</td>\n",
       "      <td>4.56</td>\n",
       "      <td>692.33</td>\n",
       "      <td>888.84</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>2021</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-29</th>\n",
       "      <td>1</td>\n",
       "      <td>255</td>\n",
       "      <td>106</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.68</td>\n",
       "      <td>1.22</td>\n",
       "      <td>194.01</td>\n",
       "      <td>178.58</td>\n",
       "      <td>373.81</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>2021</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-30</th>\n",
       "      <td>71</td>\n",
       "      <td>326</td>\n",
       "      <td>545</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.68</td>\n",
       "      <td>86.83</td>\n",
       "      <td>248.06</td>\n",
       "      <td>918.28</td>\n",
       "      <td>1253.17</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>2021</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>106</td>\n",
       "      <td>36</td>\n",
       "      <td>617</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.69</td>\n",
       "      <td>129.65</td>\n",
       "      <td>27.40</td>\n",
       "      <td>1039.72</td>\n",
       "      <td>1196.76</td>\n",
       "      <td>Friday</td>\n",
       "      <td>2021</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-01-01</th>\n",
       "      <td>167</td>\n",
       "      <td>169</td>\n",
       "      <td>40</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.76</td>\n",
       "      <td>1.69</td>\n",
       "      <td>204.28</td>\n",
       "      <td>128.63</td>\n",
       "      <td>67.41</td>\n",
       "      <td>400.32</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>2022</td>\n",
       "      <td>2022</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8037 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            apples_sold  bananas_sold  cakes_sold  cost_of_apple  \\\n",
       "date                                                               \n",
       "2000-01-01          199           347         539           0.45   \n",
       "2000-01-02          179            19         693           0.45   \n",
       "2000-01-03          178           215         447           0.45   \n",
       "2000-01-04           22           165         578           0.45   \n",
       "2000-01-05           23             1         294           0.45   \n",
       "...                 ...           ...         ...            ...   \n",
       "2021-12-28          157             6         411           1.22   \n",
       "2021-12-29            1           255         106           1.22   \n",
       "2021-12-30           71           326         545           1.22   \n",
       "2021-12-31          106            36         617           1.22   \n",
       "2022-01-01          167           169          40           1.22   \n",
       "\n",
       "            cost_of_banana  cost_of_cake  apples_profit  bananas_profit  \\\n",
       "date                                                                      \n",
       "2000-01-01            0.28          0.62          89.55           97.16   \n",
       "2000-01-02            0.28          0.62          80.56            5.32   \n",
       "2000-01-03            0.28          0.62          80.12           60.21   \n",
       "2000-01-04            0.28          0.62           9.90           46.22   \n",
       "2000-01-05            0.28          0.62          10.36            0.28   \n",
       "...                    ...           ...            ...             ...   \n",
       "2021-12-28            0.76          1.68         191.95            4.56   \n",
       "2021-12-29            0.76          1.68           1.22          194.01   \n",
       "2021-12-30            0.76          1.68          86.83          248.06   \n",
       "2021-12-31            0.76          1.69         129.65           27.40   \n",
       "2022-01-01            0.76          1.69         204.28          128.63   \n",
       "\n",
       "            cakes_profit  total_profit        Day  Year  Fiscal Year  \n",
       "date                                                                  \n",
       "2000-01-01        334.18        520.89   Saturday  2000         2000  \n",
       "2000-01-02        429.71        515.59     Sunday  2000         2000  \n",
       "2000-01-03        277.21        417.54     Monday  2000         2000  \n",
       "2000-01-04        358.49        414.61    Tuesday  2000         2000  \n",
       "2000-01-05        182.37        193.01  Wednesday  2000         2000  \n",
       "...                  ...           ...        ...   ...          ...  \n",
       "2021-12-28        692.33        888.84    Tuesday  2021         2022  \n",
       "2021-12-29        178.58        373.81  Wednesday  2021         2022  \n",
       "2021-12-30        918.28       1253.17   Thursday  2021         2022  \n",
       "2021-12-31       1039.72       1196.76     Friday  2021         2022  \n",
       "2022-01-01         67.41        400.32   Saturday  2022         2022  \n",
       "\n",
       "[8037 rows x 13 columns]"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set the date column as the index\n",
    "df = df.set_index('date')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a03b3a66-d13f-4087-835a-8b0eb96aba27",
   "metadata": {},
   "source": [
    "Now we can index the `DataFrame` using any valid date/time string, of which there are many. For example, if we wanted to look at the information for a particular day, say, 23 April 2012, we could use any of the following:\n",
    "\n",
    "  - `'2012-04-23'`\n",
    "  - `'April 23, 2012'`\n",
    "  - `'23 Apr 2012'`\n",
    "  - `'23 April 2012'`\n",
    "  - `'2012/04/23'`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "9fc17367-e6af-4802-a070-815a368d381a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "apples_sold           54\n",
       "bananas_sold         250\n",
       "cakes_sold           605\n",
       "cost_of_apple       0.79\n",
       "cost_of_banana      0.49\n",
       "cost_of_cake        1.08\n",
       "apples_profit      42.52\n",
       "bananas_profit    122.48\n",
       "cakes_profit      656.34\n",
       "total_profit      821.34\n",
       "Day               Monday\n",
       "Year                2012\n",
       "Fiscal Year         2012\n",
       "Name: 2012-04-23 00:00:00, dtype: object"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc['23 April 2012']  # St Georges day, 2012"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea4bfe73-dbde-4494-a241-70d2b3d5c277",
   "metadata": {},
   "source": [
    "Try experimenting with different indexing strings!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68b59a7c-bdc1-45e2-acab-5d90b78af466",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "79306dd4-5e19-4dd4-a726-bc1001eeb778",
   "metadata": {},
   "source": [
    "If you want the data for an entire year, just pass in the year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "ec6dbce8-15d5-44cf-a847-76c29854be86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apples_sold</th>\n",
       "      <th>bananas_sold</th>\n",
       "      <th>cakes_sold</th>\n",
       "      <th>cost_of_apple</th>\n",
       "      <th>cost_of_banana</th>\n",
       "      <th>cost_of_cake</th>\n",
       "      <th>apples_profit</th>\n",
       "      <th>bananas_profit</th>\n",
       "      <th>cakes_profit</th>\n",
       "      <th>total_profit</th>\n",
       "      <th>Day</th>\n",
       "      <th>Year</th>\n",
       "      <th>Fiscal Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2012-01-01</th>\n",
       "      <td>68</td>\n",
       "      <td>166</td>\n",
       "      <td>389</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.48</td>\n",
       "      <td>1.07</td>\n",
       "      <td>52.80</td>\n",
       "      <td>80.19</td>\n",
       "      <td>416.12</td>\n",
       "      <td>549.10</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-01-02</th>\n",
       "      <td>77</td>\n",
       "      <td>238</td>\n",
       "      <td>240</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.48</td>\n",
       "      <td>1.07</td>\n",
       "      <td>59.79</td>\n",
       "      <td>114.99</td>\n",
       "      <td>256.76</td>\n",
       "      <td>431.54</td>\n",
       "      <td>Monday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-01-03</th>\n",
       "      <td>37</td>\n",
       "      <td>319</td>\n",
       "      <td>98</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.48</td>\n",
       "      <td>1.07</td>\n",
       "      <td>28.73</td>\n",
       "      <td>154.15</td>\n",
       "      <td>104.86</td>\n",
       "      <td>287.74</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-01-04</th>\n",
       "      <td>133</td>\n",
       "      <td>173</td>\n",
       "      <td>8</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.48</td>\n",
       "      <td>1.07</td>\n",
       "      <td>103.30</td>\n",
       "      <td>83.61</td>\n",
       "      <td>8.56</td>\n",
       "      <td>195.47</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-01-05</th>\n",
       "      <td>128</td>\n",
       "      <td>316</td>\n",
       "      <td>339</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.48</td>\n",
       "      <td>1.07</td>\n",
       "      <td>99.43</td>\n",
       "      <td>152.73</td>\n",
       "      <td>362.81</td>\n",
       "      <td>614.97</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-12-27</th>\n",
       "      <td>158</td>\n",
       "      <td>144</td>\n",
       "      <td>552</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.51</td>\n",
       "      <td>1.12</td>\n",
       "      <td>128.31</td>\n",
       "      <td>72.76</td>\n",
       "      <td>617.61</td>\n",
       "      <td>818.68</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-12-28</th>\n",
       "      <td>167</td>\n",
       "      <td>75</td>\n",
       "      <td>72</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.51</td>\n",
       "      <td>1.12</td>\n",
       "      <td>135.63</td>\n",
       "      <td>37.90</td>\n",
       "      <td>80.57</td>\n",
       "      <td>254.10</td>\n",
       "      <td>Friday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-12-29</th>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.51</td>\n",
       "      <td>1.12</td>\n",
       "      <td>33.30</td>\n",
       "      <td>0.51</td>\n",
       "      <td>12.31</td>\n",
       "      <td>46.12</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-12-30</th>\n",
       "      <td>152</td>\n",
       "      <td>277</td>\n",
       "      <td>680</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.51</td>\n",
       "      <td>1.12</td>\n",
       "      <td>123.48</td>\n",
       "      <td>140.02</td>\n",
       "      <td>761.11</td>\n",
       "      <td>1024.61</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-12-31</th>\n",
       "      <td>78</td>\n",
       "      <td>255</td>\n",
       "      <td>45</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.51</td>\n",
       "      <td>1.12</td>\n",
       "      <td>63.37</td>\n",
       "      <td>128.91</td>\n",
       "      <td>50.37</td>\n",
       "      <td>242.66</td>\n",
       "      <td>Monday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>366 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            apples_sold  bananas_sold  cakes_sold  cost_of_apple  \\\n",
       "date                                                               \n",
       "2012-01-01           68           166         389           0.78   \n",
       "2012-01-02           77           238         240           0.78   \n",
       "2012-01-03           37           319          98           0.78   \n",
       "2012-01-04          133           173           8           0.78   \n",
       "2012-01-05          128           316         339           0.78   \n",
       "...                 ...           ...         ...            ...   \n",
       "2012-12-27          158           144         552           0.81   \n",
       "2012-12-28          167            75          72           0.81   \n",
       "2012-12-29           41             1          11           0.81   \n",
       "2012-12-30          152           277         680           0.81   \n",
       "2012-12-31           78           255          45           0.81   \n",
       "\n",
       "            cost_of_banana  cost_of_cake  apples_profit  bananas_profit  \\\n",
       "date                                                                      \n",
       "2012-01-01            0.48          1.07          52.80           80.19   \n",
       "2012-01-02            0.48          1.07          59.79          114.99   \n",
       "2012-01-03            0.48          1.07          28.73          154.15   \n",
       "2012-01-04            0.48          1.07         103.30           83.61   \n",
       "2012-01-05            0.48          1.07          99.43          152.73   \n",
       "...                    ...           ...            ...             ...   \n",
       "2012-12-27            0.51          1.12         128.31           72.76   \n",
       "2012-12-28            0.51          1.12         135.63           37.90   \n",
       "2012-12-29            0.51          1.12          33.30            0.51   \n",
       "2012-12-30            0.51          1.12         123.48          140.02   \n",
       "2012-12-31            0.51          1.12          63.37          128.91   \n",
       "\n",
       "            cakes_profit  total_profit        Day  Year  Fiscal Year  \n",
       "date                                                                  \n",
       "2012-01-01        416.12        549.10     Sunday  2012         2012  \n",
       "2012-01-02        256.76        431.54     Monday  2012         2012  \n",
       "2012-01-03        104.86        287.74    Tuesday  2012         2012  \n",
       "2012-01-04          8.56        195.47  Wednesday  2012         2012  \n",
       "2012-01-05        362.81        614.97   Thursday  2012         2012  \n",
       "...                  ...           ...        ...   ...          ...  \n",
       "2012-12-27        617.61        818.68   Thursday  2012         2013  \n",
       "2012-12-28         80.57        254.10     Friday  2012         2013  \n",
       "2012-12-29         12.31         46.12   Saturday  2012         2013  \n",
       "2012-12-30        761.11       1024.61     Sunday  2012         2013  \n",
       "2012-12-31         50.37        242.66     Monday  2012         2013  \n",
       "\n",
       "[366 rows x 13 columns]"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc['2012']  # Get all data from 2012"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc145bf5-2716-4400-8179-675cf26514f9",
   "metadata": {},
   "source": [
    "Looks like 2012 was a leap year, because there are 366 days. Let's check this by getting the data for February of that year. To do this, we just need to add the month."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "83afeb85-821e-4601-91b2-f215b1ea3d7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apples_sold</th>\n",
       "      <th>bananas_sold</th>\n",
       "      <th>cakes_sold</th>\n",
       "      <th>cost_of_apple</th>\n",
       "      <th>cost_of_banana</th>\n",
       "      <th>cost_of_cake</th>\n",
       "      <th>apples_profit</th>\n",
       "      <th>bananas_profit</th>\n",
       "      <th>cakes_profit</th>\n",
       "      <th>total_profit</th>\n",
       "      <th>Day</th>\n",
       "      <th>Year</th>\n",
       "      <th>Fiscal Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2012-02-01</th>\n",
       "      <td>198</td>\n",
       "      <td>309</td>\n",
       "      <td>540</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.48</td>\n",
       "      <td>1.07</td>\n",
       "      <td>154.32</td>\n",
       "      <td>149.85</td>\n",
       "      <td>579.87</td>\n",
       "      <td>884.05</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-02</th>\n",
       "      <td>130</td>\n",
       "      <td>140</td>\n",
       "      <td>48</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.07</td>\n",
       "      <td>101.33</td>\n",
       "      <td>67.90</td>\n",
       "      <td>51.55</td>\n",
       "      <td>220.79</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-03</th>\n",
       "      <td>83</td>\n",
       "      <td>164</td>\n",
       "      <td>500</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.07</td>\n",
       "      <td>64.71</td>\n",
       "      <td>79.55</td>\n",
       "      <td>537.05</td>\n",
       "      <td>681.31</td>\n",
       "      <td>Friday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-04</th>\n",
       "      <td>34</td>\n",
       "      <td>221</td>\n",
       "      <td>292</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.07</td>\n",
       "      <td>26.51</td>\n",
       "      <td>107.22</td>\n",
       "      <td>313.68</td>\n",
       "      <td>447.40</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-05</th>\n",
       "      <td>130</td>\n",
       "      <td>18</td>\n",
       "      <td>180</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.07</td>\n",
       "      <td>101.37</td>\n",
       "      <td>8.73</td>\n",
       "      <td>193.39</td>\n",
       "      <td>303.49</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-06</th>\n",
       "      <td>113</td>\n",
       "      <td>126</td>\n",
       "      <td>361</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.07</td>\n",
       "      <td>88.13</td>\n",
       "      <td>61.14</td>\n",
       "      <td>387.90</td>\n",
       "      <td>537.17</td>\n",
       "      <td>Monday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-07</th>\n",
       "      <td>77</td>\n",
       "      <td>337</td>\n",
       "      <td>92</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.07</td>\n",
       "      <td>60.06</td>\n",
       "      <td>163.55</td>\n",
       "      <td>98.87</td>\n",
       "      <td>322.48</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-08</th>\n",
       "      <td>156</td>\n",
       "      <td>343</td>\n",
       "      <td>576</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.07</td>\n",
       "      <td>121.69</td>\n",
       "      <td>166.49</td>\n",
       "      <td>619.07</td>\n",
       "      <td>907.25</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-09</th>\n",
       "      <td>101</td>\n",
       "      <td>194</td>\n",
       "      <td>116</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.07</td>\n",
       "      <td>78.80</td>\n",
       "      <td>94.18</td>\n",
       "      <td>124.69</td>\n",
       "      <td>297.66</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-10</th>\n",
       "      <td>65</td>\n",
       "      <td>234</td>\n",
       "      <td>179</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>50.72</td>\n",
       "      <td>113.61</td>\n",
       "      <td>192.43</td>\n",
       "      <td>356.76</td>\n",
       "      <td>Friday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-11</th>\n",
       "      <td>60</td>\n",
       "      <td>248</td>\n",
       "      <td>446</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>46.82</td>\n",
       "      <td>120.42</td>\n",
       "      <td>479.53</td>\n",
       "      <td>646.77</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-12</th>\n",
       "      <td>167</td>\n",
       "      <td>31</td>\n",
       "      <td>444</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>130.34</td>\n",
       "      <td>15.05</td>\n",
       "      <td>477.44</td>\n",
       "      <td>622.83</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-13</th>\n",
       "      <td>131</td>\n",
       "      <td>64</td>\n",
       "      <td>32</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>102.25</td>\n",
       "      <td>31.08</td>\n",
       "      <td>34.41</td>\n",
       "      <td>167.75</td>\n",
       "      <td>Monday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-14</th>\n",
       "      <td>144</td>\n",
       "      <td>232</td>\n",
       "      <td>244</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>112.42</td>\n",
       "      <td>112.69</td>\n",
       "      <td>262.44</td>\n",
       "      <td>487.55</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-15</th>\n",
       "      <td>174</td>\n",
       "      <td>232</td>\n",
       "      <td>603</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>135.85</td>\n",
       "      <td>112.71</td>\n",
       "      <td>648.66</td>\n",
       "      <td>897.21</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-16</th>\n",
       "      <td>100</td>\n",
       "      <td>25</td>\n",
       "      <td>503</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>78.09</td>\n",
       "      <td>12.15</td>\n",
       "      <td>541.15</td>\n",
       "      <td>631.38</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-17</th>\n",
       "      <td>4</td>\n",
       "      <td>133</td>\n",
       "      <td>649</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.12</td>\n",
       "      <td>64.63</td>\n",
       "      <td>698.31</td>\n",
       "      <td>766.06</td>\n",
       "      <td>Friday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-18</th>\n",
       "      <td>95</td>\n",
       "      <td>71</td>\n",
       "      <td>357</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>74.20</td>\n",
       "      <td>34.51</td>\n",
       "      <td>384.17</td>\n",
       "      <td>492.88</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-19</th>\n",
       "      <td>134</td>\n",
       "      <td>224</td>\n",
       "      <td>518</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>104.67</td>\n",
       "      <td>108.87</td>\n",
       "      <td>557.50</td>\n",
       "      <td>771.05</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-20</th>\n",
       "      <td>10</td>\n",
       "      <td>337</td>\n",
       "      <td>170</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>7.81</td>\n",
       "      <td>163.82</td>\n",
       "      <td>182.99</td>\n",
       "      <td>354.62</td>\n",
       "      <td>Monday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-21</th>\n",
       "      <td>85</td>\n",
       "      <td>63</td>\n",
       "      <td>388</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>66.41</td>\n",
       "      <td>30.63</td>\n",
       "      <td>417.69</td>\n",
       "      <td>514.73</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-22</th>\n",
       "      <td>190</td>\n",
       "      <td>284</td>\n",
       "      <td>312</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>148.47</td>\n",
       "      <td>138.09</td>\n",
       "      <td>335.92</td>\n",
       "      <td>622.48</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-23</th>\n",
       "      <td>190</td>\n",
       "      <td>18</td>\n",
       "      <td>562</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>148.49</td>\n",
       "      <td>8.75</td>\n",
       "      <td>605.15</td>\n",
       "      <td>762.40</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-24</th>\n",
       "      <td>96</td>\n",
       "      <td>246</td>\n",
       "      <td>331</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>75.04</td>\n",
       "      <td>119.64</td>\n",
       "      <td>356.46</td>\n",
       "      <td>551.14</td>\n",
       "      <td>Friday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-25</th>\n",
       "      <td>4</td>\n",
       "      <td>151</td>\n",
       "      <td>333</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>3.13</td>\n",
       "      <td>73.45</td>\n",
       "      <td>358.66</td>\n",
       "      <td>435.23</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-26</th>\n",
       "      <td>118</td>\n",
       "      <td>176</td>\n",
       "      <td>388</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>92.26</td>\n",
       "      <td>85.62</td>\n",
       "      <td>417.95</td>\n",
       "      <td>595.82</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-27</th>\n",
       "      <td>111</td>\n",
       "      <td>337</td>\n",
       "      <td>277</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>86.79</td>\n",
       "      <td>163.96</td>\n",
       "      <td>298.42</td>\n",
       "      <td>549.17</td>\n",
       "      <td>Monday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-28</th>\n",
       "      <td>60</td>\n",
       "      <td>257</td>\n",
       "      <td>163</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>46.92</td>\n",
       "      <td>125.05</td>\n",
       "      <td>175.63</td>\n",
       "      <td>347.60</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012-02-29</th>\n",
       "      <td>197</td>\n",
       "      <td>309</td>\n",
       "      <td>288</td>\n",
       "      <td>0.78</td>\n",
       "      <td>0.49</td>\n",
       "      <td>1.08</td>\n",
       "      <td>154.08</td>\n",
       "      <td>150.38</td>\n",
       "      <td>310.35</td>\n",
       "      <td>614.80</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>2012</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            apples_sold  bananas_sold  cakes_sold  cost_of_apple  \\\n",
       "date                                                               \n",
       "2012-02-01          198           309         540           0.78   \n",
       "2012-02-02          130           140          48           0.78   \n",
       "2012-02-03           83           164         500           0.78   \n",
       "2012-02-04           34           221         292           0.78   \n",
       "2012-02-05          130            18         180           0.78   \n",
       "2012-02-06          113           126         361           0.78   \n",
       "2012-02-07           77           337          92           0.78   \n",
       "2012-02-08          156           343         576           0.78   \n",
       "2012-02-09          101           194         116           0.78   \n",
       "2012-02-10           65           234         179           0.78   \n",
       "2012-02-11           60           248         446           0.78   \n",
       "2012-02-12          167            31         444           0.78   \n",
       "2012-02-13          131            64          32           0.78   \n",
       "2012-02-14          144           232         244           0.78   \n",
       "2012-02-15          174           232         603           0.78   \n",
       "2012-02-16          100            25         503           0.78   \n",
       "2012-02-17            4           133         649           0.78   \n",
       "2012-02-18           95            71         357           0.78   \n",
       "2012-02-19          134           224         518           0.78   \n",
       "2012-02-20           10           337         170           0.78   \n",
       "2012-02-21           85            63         388           0.78   \n",
       "2012-02-22          190           284         312           0.78   \n",
       "2012-02-23          190            18         562           0.78   \n",
       "2012-02-24           96           246         331           0.78   \n",
       "2012-02-25            4           151         333           0.78   \n",
       "2012-02-26          118           176         388           0.78   \n",
       "2012-02-27          111           337         277           0.78   \n",
       "2012-02-28           60           257         163           0.78   \n",
       "2012-02-29          197           309         288           0.78   \n",
       "\n",
       "            cost_of_banana  cost_of_cake  apples_profit  bananas_profit  \\\n",
       "date                                                                      \n",
       "2012-02-01            0.48          1.07         154.32          149.85   \n",
       "2012-02-02            0.49          1.07         101.33           67.90   \n",
       "2012-02-03            0.49          1.07          64.71           79.55   \n",
       "2012-02-04            0.49          1.07          26.51          107.22   \n",
       "2012-02-05            0.49          1.07         101.37            8.73   \n",
       "2012-02-06            0.49          1.07          88.13           61.14   \n",
       "2012-02-07            0.49          1.07          60.06          163.55   \n",
       "2012-02-08            0.49          1.07         121.69          166.49   \n",
       "2012-02-09            0.49          1.07          78.80           94.18   \n",
       "2012-02-10            0.49          1.08          50.72          113.61   \n",
       "2012-02-11            0.49          1.08          46.82          120.42   \n",
       "2012-02-12            0.49          1.08         130.34           15.05   \n",
       "2012-02-13            0.49          1.08         102.25           31.08   \n",
       "2012-02-14            0.49          1.08         112.42          112.69   \n",
       "2012-02-15            0.49          1.08         135.85          112.71   \n",
       "2012-02-16            0.49          1.08          78.09           12.15   \n",
       "2012-02-17            0.49          1.08           3.12           64.63   \n",
       "2012-02-18            0.49          1.08          74.20           34.51   \n",
       "2012-02-19            0.49          1.08         104.67          108.87   \n",
       "2012-02-20            0.49          1.08           7.81          163.82   \n",
       "2012-02-21            0.49          1.08          66.41           30.63   \n",
       "2012-02-22            0.49          1.08         148.47          138.09   \n",
       "2012-02-23            0.49          1.08         148.49            8.75   \n",
       "2012-02-24            0.49          1.08          75.04          119.64   \n",
       "2012-02-25            0.49          1.08           3.13           73.45   \n",
       "2012-02-26            0.49          1.08          92.26           85.62   \n",
       "2012-02-27            0.49          1.08          86.79          163.96   \n",
       "2012-02-28            0.49          1.08          46.92          125.05   \n",
       "2012-02-29            0.49          1.08         154.08          150.38   \n",
       "\n",
       "            cakes_profit  total_profit        Day  Year  Fiscal Year  \n",
       "date                                                                  \n",
       "2012-02-01        579.87        884.05  Wednesday  2012         2012  \n",
       "2012-02-02         51.55        220.79   Thursday  2012         2012  \n",
       "2012-02-03        537.05        681.31     Friday  2012         2012  \n",
       "2012-02-04        313.68        447.40   Saturday  2012         2012  \n",
       "2012-02-05        193.39        303.49     Sunday  2012         2012  \n",
       "2012-02-06        387.90        537.17     Monday  2012         2012  \n",
       "2012-02-07         98.87        322.48    Tuesday  2012         2012  \n",
       "2012-02-08        619.07        907.25  Wednesday  2012         2012  \n",
       "2012-02-09        124.69        297.66   Thursday  2012         2012  \n",
       "2012-02-10        192.43        356.76     Friday  2012         2012  \n",
       "2012-02-11        479.53        646.77   Saturday  2012         2012  \n",
       "2012-02-12        477.44        622.83     Sunday  2012         2012  \n",
       "2012-02-13         34.41        167.75     Monday  2012         2012  \n",
       "2012-02-14        262.44        487.55    Tuesday  2012         2012  \n",
       "2012-02-15        648.66        897.21  Wednesday  2012         2012  \n",
       "2012-02-16        541.15        631.38   Thursday  2012         2012  \n",
       "2012-02-17        698.31        766.06     Friday  2012         2012  \n",
       "2012-02-18        384.17        492.88   Saturday  2012         2012  \n",
       "2012-02-19        557.50        771.05     Sunday  2012         2012  \n",
       "2012-02-20        182.99        354.62     Monday  2012         2012  \n",
       "2012-02-21        417.69        514.73    Tuesday  2012         2012  \n",
       "2012-02-22        335.92        622.48  Wednesday  2012         2012  \n",
       "2012-02-23        605.15        762.40   Thursday  2012         2012  \n",
       "2012-02-24        356.46        551.14     Friday  2012         2012  \n",
       "2012-02-25        358.66        435.23   Saturday  2012         2012  \n",
       "2012-02-26        417.95        595.82     Sunday  2012         2012  \n",
       "2012-02-27        298.42        549.17     Monday  2012         2012  \n",
       "2012-02-28        175.63        347.60    Tuesday  2012         2012  \n",
       "2012-02-29        310.35        614.80  Wednesday  2012         2012  "
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc['2012-02']  # February 2012"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc1c38c6-ed81-460c-a8da-4dd685fe3827",
   "metadata": {},
   "source": [
    "We can also 'slice' a `DataFrame` with a `DatetimeIndex` using date strings. Let's grab the data for the last four days of August 2014."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "ab9e10e1-03e7-40a5-b9aa-79397f24349e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apples_sold</th>\n",
       "      <th>bananas_sold</th>\n",
       "      <th>cakes_sold</th>\n",
       "      <th>cost_of_apple</th>\n",
       "      <th>cost_of_banana</th>\n",
       "      <th>cost_of_cake</th>\n",
       "      <th>apples_profit</th>\n",
       "      <th>bananas_profit</th>\n",
       "      <th>cakes_profit</th>\n",
       "      <th>total_profit</th>\n",
       "      <th>Day</th>\n",
       "      <th>Year</th>\n",
       "      <th>Fiscal Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2014-08-28</th>\n",
       "      <td>125</td>\n",
       "      <td>63</td>\n",
       "      <td>266</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.55</td>\n",
       "      <td>1.21</td>\n",
       "      <td>109.50</td>\n",
       "      <td>34.34</td>\n",
       "      <td>321.05</td>\n",
       "      <td>464.89</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>2014</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-08-29</th>\n",
       "      <td>77</td>\n",
       "      <td>135</td>\n",
       "      <td>450</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.55</td>\n",
       "      <td>1.21</td>\n",
       "      <td>67.46</td>\n",
       "      <td>73.59</td>\n",
       "      <td>543.19</td>\n",
       "      <td>684.25</td>\n",
       "      <td>Friday</td>\n",
       "      <td>2014</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-08-30</th>\n",
       "      <td>8</td>\n",
       "      <td>122</td>\n",
       "      <td>435</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.55</td>\n",
       "      <td>1.21</td>\n",
       "      <td>7.01</td>\n",
       "      <td>66.52</td>\n",
       "      <td>525.15</td>\n",
       "      <td>598.68</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>2014</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-08-31</th>\n",
       "      <td>124</td>\n",
       "      <td>8</td>\n",
       "      <td>467</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.55</td>\n",
       "      <td>1.21</td>\n",
       "      <td>108.67</td>\n",
       "      <td>4.36</td>\n",
       "      <td>563.85</td>\n",
       "      <td>676.88</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>2014</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            apples_sold  bananas_sold  cakes_sold  cost_of_apple  \\\n",
       "date                                                               \n",
       "2014-08-28          125            63         266           0.88   \n",
       "2014-08-29           77           135         450           0.88   \n",
       "2014-08-30            8           122         435           0.88   \n",
       "2014-08-31          124             8         467           0.88   \n",
       "\n",
       "            cost_of_banana  cost_of_cake  apples_profit  bananas_profit  \\\n",
       "date                                                                      \n",
       "2014-08-28            0.55          1.21         109.50           34.34   \n",
       "2014-08-29            0.55          1.21          67.46           73.59   \n",
       "2014-08-30            0.55          1.21           7.01           66.52   \n",
       "2014-08-31            0.55          1.21         108.67            4.36   \n",
       "\n",
       "            cakes_profit  total_profit       Day  Year  Fiscal Year  \n",
       "date                                                                 \n",
       "2014-08-28        321.05        464.89  Thursday  2014         2015  \n",
       "2014-08-29        543.19        684.25    Friday  2014         2015  \n",
       "2014-08-30        525.15        598.68  Saturday  2014         2015  \n",
       "2014-08-31        563.85        676.88    Sunday  2014         2015  "
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc['2014-08-28':'2014-08-31']  # Last 4 days of August 2014"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9e661d6-69db-4f66-aa59-06b9097612ec",
   "metadata": {},
   "source": [
    "To round things off, let's group the data by quarters of the fiscal year (which starts in April) and plot mean profit over time. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "f3c5c4f8-ee58-4c11-bb77-92aecd72e116",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apples_sold</th>\n",
       "      <th>bananas_sold</th>\n",
       "      <th>cakes_sold</th>\n",
       "      <th>cost_of_apple</th>\n",
       "      <th>cost_of_banana</th>\n",
       "      <th>cost_of_cake</th>\n",
       "      <th>apples_profit</th>\n",
       "      <th>bananas_profit</th>\n",
       "      <th>cakes_profit</th>\n",
       "      <th>total_profit</th>\n",
       "      <th>Day</th>\n",
       "      <th>Year</th>\n",
       "      <th>Fiscal Year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-01-01</th>\n",
       "      <td>199</td>\n",
       "      <td>347</td>\n",
       "      <td>539</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>89.55</td>\n",
       "      <td>97.16</td>\n",
       "      <td>334.18</td>\n",
       "      <td>520.89</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000Q3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-02</th>\n",
       "      <td>179</td>\n",
       "      <td>19</td>\n",
       "      <td>693</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>80.56</td>\n",
       "      <td>5.32</td>\n",
       "      <td>429.71</td>\n",
       "      <td>515.59</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000Q3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-03</th>\n",
       "      <td>178</td>\n",
       "      <td>215</td>\n",
       "      <td>447</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>80.12</td>\n",
       "      <td>60.21</td>\n",
       "      <td>277.21</td>\n",
       "      <td>417.54</td>\n",
       "      <td>Monday</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000Q3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-04</th>\n",
       "      <td>22</td>\n",
       "      <td>165</td>\n",
       "      <td>578</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>9.90</td>\n",
       "      <td>46.22</td>\n",
       "      <td>358.49</td>\n",
       "      <td>414.61</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000Q3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-01-05</th>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>294</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.62</td>\n",
       "      <td>10.36</td>\n",
       "      <td>0.28</td>\n",
       "      <td>182.37</td>\n",
       "      <td>193.01</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000Q3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            apples_sold  bananas_sold  cakes_sold  cost_of_apple  \\\n",
       "date                                                               \n",
       "2000-01-01          199           347         539           0.45   \n",
       "2000-01-02          179            19         693           0.45   \n",
       "2000-01-03          178           215         447           0.45   \n",
       "2000-01-04           22           165         578           0.45   \n",
       "2000-01-05           23             1         294           0.45   \n",
       "\n",
       "            cost_of_banana  cost_of_cake  apples_profit  bananas_profit  \\\n",
       "date                                                                      \n",
       "2000-01-01            0.28          0.62          89.55           97.16   \n",
       "2000-01-02            0.28          0.62          80.56            5.32   \n",
       "2000-01-03            0.28          0.62          80.12           60.21   \n",
       "2000-01-04            0.28          0.62           9.90           46.22   \n",
       "2000-01-05            0.28          0.62          10.36            0.28   \n",
       "\n",
       "            cakes_profit  total_profit        Day  Year Fiscal Year  \n",
       "date                                                                 \n",
       "2000-01-01        334.18        520.89   Saturday  2000      2000Q3  \n",
       "2000-01-02        429.71        515.59     Sunday  2000      2000Q3  \n",
       "2000-01-03        277.21        417.54     Monday  2000      2000Q3  \n",
       "2000-01-04        358.49        414.61    Tuesday  2000      2000Q3  \n",
       "2000-01-05        182.37        193.01  Wednesday  2000      2000Q3  "
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A new column for quarters of the fiscal year\n",
    "df['Fiscal Year'] = df.index.to_period('Q-APR')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "acc589c7-057c-4e59-94c7-69b900f78afd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Get the profit columns\n",
    "profit_cols = df.columns[df.columns.str.endswith('profit')]\n",
    "(\n",
    "    df.groupby('Fiscal Year')[profit_cols]\n",
    "    .mean()\n",
    "    .plot(ylabel='Profit (£)', figsize=(12, 4), rot=45)\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e01b2d6-275b-482e-8449-37150b8f3e01",
   "metadata": {},
   "source": [
    "If you can master tricks like this in `pandas`, the world of time series data is at your fingertips. \n",
    "\n",
    "---\n",
    "\n",
    "  - `pandas` - [Follow this link to learn more about Time Series / Date functionality](https://pandas.pydata.org/pandas-docs/version/0.23.0/timeseries.html)\n",
    "\n",
    "---"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
